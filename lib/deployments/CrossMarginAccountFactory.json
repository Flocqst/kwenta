{
    "address": "0x0600BF2d42816D0Da02C086727e57DEe03115A20",
    "abi": [
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_version",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "_marginAsset",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_addressResolver",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_marginBaseSettings",
            "type": "address"
          },
          {
            "internalType": "address payable",
            "name": "_ops",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "NewAccount",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "addressResolver",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "implementation",
        "outputs": [
          {
            "internalType": "contract MarginBase",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "marginAsset",
        "outputs": [
          {
            "internalType": "contract IERC20",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "marginBaseSettings",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "newAccount",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "ops",
        "outputs": [
          {
            "internalType": "address payable",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "version",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "transactionHash": "0x6c2aff12cb5bf67d98be943bf11e9421a850cc05f7c6ee3c317769a168b0e2d2",
    "receipt": {
      "to": null,
      "from": "0xB594a842A528cb8b80536a84D3DfEd73C2c0c658",
      "contractAddress": "0x0600BF2d42816D0Da02C086727e57DEe03115A20",
      "transactionIndex": 0,
      "gasUsed": "4791744",
      "logsBloom": "0x
      "blockHash": "0x348543bfb79f3abbaacad7901c57decb462811ff6c1a844a256711fde38b5bc3",
      "transactionHash": "0x6c2aff12cb5bf67d98be943bf11e9421a850cc05f7c6ee3c317769a168b0e2d2",
      "logs": [
        {
          "transactionIndex": 0,
          "blockNumber": 4746618,
          "transactionHash": "0x6c2aff12cb5bf67d98be943bf11e9421a850cc05f7c6ee3c317769a168b0e2d2",
          "address": "0x43Fee5E71979fD6f630B50EaAE061a5355e41aF6",
          "topics": [
            "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000600bf2d42816d0da02c086727e57dee03115a20"
          ],
          "data": "0x",
          "logIndex": 0,
          "blockHash": "0x348543bfb79f3abbaacad7901c57decb462811ff6c1a844a256711fde38b5bc3"
        }
      ],
      "blockNumber": 4746618,
      "cumulativeGasUsed": "4791744",
      "status": 1,
      "byzantium": true
    },
    "args": [
      "1.0.0",
      "0xaA5068dC2B3AADE533d3e52C6eeaadC6a8154c57",
      "0xb08b62e1cdfd37eCCd69A9ACe67322CCF801b3A6",
      "0xA8EE338DbeB651A6483578683Fca90b8FfbdE417",
      "0xB3f5503f93d5Ef84b06993a1975B9D21B962892F"
    ],
    "numDeployments": 1,
    "solcInputHash": "b8586a1d92d66e61ca5cf7095e3e1241",
    "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_marginAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressResolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marginBaseSettings\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_ops\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NewAccount\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressResolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"contract MarginBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marginAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marginBaseSettings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ops\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"JaredBorders (jaredborders@proton.me), JChiaramonte7 (jeremy@bytecode.llc)\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_addressResolver\":\": contract address for synthetix address resolver\",\"_marginAsset\":\": token contract address used for account margin\",\"_marginBaseSettings\":\": contract address for MarginBase account settings\",\"_ops\":\": contract address for gelato ops -- must be payable\",\"_version\":\": version of contract\"}},\"newAccount()\":{\"details\":\"this contract is the initial owner of cloned MarginBase, but ownership is transferred after successful initialization\"}},\"title\":\"Kwenta MarginBase Factory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addressResolver()\":{\"notice\":\"synthetix address resolver\"},\"constructor\":{\"notice\":\"deploy MarginBase implementation to later be cloned\"},\"implementation()\":{\"notice\":\"MarginBase contract acting as user's account\"},\"marginAsset()\":{\"notice\":\"ERC20 token used to interact with markets\"},\"marginBaseSettings()\":{\"notice\":\"settings for MarginBase accounts\"},\"newAccount()\":{\"notice\":\"clone MarginBase (i.e. create new account for user)\"},\"ops()\":{\"notice\":\"gelato ops\"}},\"notice\":\"Factory which enables deploying a MarginBase account for any user \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MarginAccountFactory.sol\":\"MarginAccountFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/MarginAccountFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport \\\"./utils/MinimalProxyFactory.sol\\\";\\nimport \\\"./MarginBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Kwenta MarginBase Factory\\n/// @author JaredBorders (jaredborders@proton.me), JChiaramonte7 (jeremy@bytecode.llc)\\n/// @notice Factory which enables deploying a MarginBase account for any user \\ncontract MarginAccountFactory is MinimalProxyFactory {\\n    \\n    string public version; // format: (0.1.0)\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Immutables\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice MarginBase contract acting as user's account\\n    MarginBase public immutable implementation;\\n\\n    /// @notice ERC20 token used to interact with markets\\n    IERC20 public immutable marginAsset;\\n\\n    /// @notice synthetix address resolver\\n    address public immutable addressResolver;\\n\\n    /// @notice settings for MarginBase accounts\\n    address public marginBaseSettings;\\n    \\n    /// @notice gelato ops\\n    address payable public immutable ops;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Events\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    event NewAccount(address indexed owner, address account);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Constructor\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice deploy MarginBase implementation to later be cloned\\n    /// @param _version: version of contract\\n    /// @param _marginAsset: token contract address used for account margin\\n    /// @param _addressResolver: contract address for synthetix address resolver\\n    /// @param _marginBaseSettings: contract address for MarginBase account settings\\n    /// @param _ops: contract address for gelato ops -- must be payable\\n    constructor(\\n        string memory _version,\\n        address _marginAsset,\\n        address _addressResolver,\\n        address _marginBaseSettings,\\n        address payable _ops\\n    ) {\\n        version = _version;\\n        implementation = new MarginBase();\\n        marginAsset = IERC20(_marginAsset);\\n        addressResolver = _addressResolver;\\n\\n        /// @dev MarginBaseSettings must exist prior to MarginAccountFactory\\n        marginBaseSettings = _marginBaseSettings;\\n\\n        ops = _ops;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Account Deployment\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice clone MarginBase (i.e. create new account for user)\\n    /// @dev this contract is the initial owner of cloned MarginBase,\\n    /// but ownership is transferred after successful initialization\\n    function newAccount() external returns (address) {\\n        MarginBase account = MarginBase(\\n            _cloneAsMinimalProxy(address(implementation), \\\"Creation failure\\\")\\n        );\\n        account.initialize(address(marginAsset), addressResolver, marginBaseSettings, ops);\\n        account.transferOwnership(msg.sender);\\n\\n        emit NewAccount(msg.sender, address(account));\\n        return address(account);\\n    }\\n}\\n\",\"keccak256\":\"0x7f5fe4ff32154d1f0c24ad795cc371a3e6f4b807954331cf44c05c5f362b9264\",\"license\":\"GPL-3.0-or-later\"},\"contracts/MarginBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IAddressResolver.sol\\\";\\nimport \\\"./interfaces/IFuturesMarket.sol\\\";\\nimport \\\"./interfaces/IFuturesMarketManager.sol\\\";\\nimport \\\"./interfaces/IExchangeRates.sol\\\";\\nimport \\\"./utils/OpsReady.sol\\\";\\nimport \\\"./utils/MinimalProxyable.sol\\\";\\nimport \\\"./MarginBaseSettings.sol\\\";\\n\\n/// @title Kwenta MarginBase Account\\n/// @author JaredBorders (jaredborders@proton.me), JChiaramonte7 (jeremy@bytecode.llc)\\n/// @notice Flexible, minimalist, and gas-optimized cross-margin enabled account\\n/// for managing perpetual futures positions\\ncontract MarginBase is MinimalProxyable, OpsReady {\\n    /*///////////////////////////////////////////////////////////////\\n                                Constants\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice tracking code used when modifying positions\\n    bytes32 private constant TRACKING_CODE = \\\"KWENTA\\\";\\n\\n    /// @notice name for futures market manager, needed for fetching market key\\n    bytes32 private constant FUTURES_MANAGER = \\\"FuturesMarketManager\\\";\\n\\n    /// @notice max BPS\\n    uint256 private constant MAX_BPS = 10000;\\n\\n    // constant for sUSD currency key\\n    bytes32 private constant SUSD = \\\"sUSD\\\";\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Types\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    // marketKey: synthetix futures market id/key\\n    // margin: amount of margin (in sUSD) in specific futures market\\n    // size: denoted in market currency (i.e. ETH, BTC, etc), size of futures position\\n    struct ActiveMarketPosition {\\n        bytes32 marketKey;\\n        uint128 margin;\\n        int128 size;\\n    }\\n\\n    // marketKey: synthetix futures market id/key\\n    // marginDelta: amount of margin (in sUSD) to deposit or withdraw\\n    // sizeDelta: denoted in market currency (i.e. ETH, BTC, etc), size of futures position\\n    // isClosing: indicates if position needs to be closed\\n    struct UpdateMarketPositionSpec {\\n        bytes32 marketKey;\\n        int256 marginDelta; // positive indicates deposit, negative withdraw\\n        int256 sizeDelta;\\n        bool isClosing; // if true, marginDelta nor sizeDelta are considered. simply closes position\\n    }\\n\\n    // marketKey: synthetix futures market id/key\\n    // marginDelta: amount of margin (in sUSD) to deposit or withdraw\\n    // sizeDelta: denoted in market currency (i.e. ETH, BTC, etc), size of futures position\\n    // desiredPrice: limit or stop price desired\\n    // gelatoTaskId: unqiue taskId from gelato necessary for cancelling orders\\n    struct Order {\\n        bytes32 marketKey;\\n        int256 marginDelta; // positive indicates deposit, negative withdraw\\n        int256 sizeDelta;\\n        uint256 desiredPrice;\\n        bytes32 gelatoTaskId;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                State\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice settings for MarginBase account\\n    MarginBaseSettings public marginBaseSettings;\\n\\n    /// @notice synthetix address resolver\\n    IAddressResolver private addressResolver;\\n\\n    /// @notice synthetix futures market manager\\n    IFuturesMarketManager private futuresManager;\\n\\n    /// @notice token contract used for account margin\\n    IERC20 public marginAsset;\\n\\n    /// @notice margin locked for future events (ie. limit orders)\\n    uint256 public committedMargin;\\n\\n    /// @notice market keys that the account has active positions in\\n    bytes32[] public activeMarketKeys;\\n\\n    /// @notice market keys mapped to active market positions\\n    mapping(bytes32 => ActiveMarketPosition) public activeMarketPositions;\\n\\n    /// @notice limit orders\\n    mapping(uint256 => Order) public orders;\\n\\n    /// @notice sequentially id orders\\n    uint256 public orderId;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Events\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice emitted after a successful deposit\\n    /// @param user: the address that deposited into account\\n    /// @param amount: amount of marginAsset to deposit into marginBase account\\n    event Deposit(address indexed user, uint256 amount);\\n\\n    /// @notice emitted after a successful withdrawal\\n    /// @param user: the address that withdrew from account\\n    /// @param amount: amount of marginAsset to withdraw from marginBase account\\n    event Withdraw(address indexed user, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Errors\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice amount deposited/withdrawn into/from account cannot be zero\\n    error AmountCantBeZero();\\n\\n    /// @notice position with given marketKey does not exist\\n    /// @param marketKey: key for synthetix futures market\\n    error MissingMarketKey(bytes32 marketKey);\\n\\n    /// @notice limit size of new position specs passed into distribute margin\\n    /// @param numberOfNewPositions: number of new position specs\\n    error MaxNewPositionsExceeded(uint256 numberOfNewPositions);\\n\\n    /// @notice exceeds useable margin\\n    /// @param available: amount of useable margin asset\\n    /// @param required: amount of margin asset required\\n    error InsufficientFreeMargin(uint256 available, uint256 required);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Constructor & Initializer\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice constructor never used except for first CREATE\\n    // solhint-disable-next-line\\n    constructor() MinimalProxyable() {}\\n\\n    /// @notice initialize contract (only once) and transfer ownership to caller\\n    /// @param _marginAsset: token contract address used for account margin\\n    /// @param _addressResolver: contract address for synthetix address resolver\\n    /// @param _marginBaseSettings: contract address for MarginBase account settings\\n    /// @param _ops: gelato ops address\\n    function initialize(\\n        address _marginAsset,\\n        address _addressResolver,\\n        address _marginBaseSettings,\\n        address payable _ops\\n    ) external initOnce {\\n        marginAsset = IERC20(_marginAsset);\\n        addressResolver = IAddressResolver(_addressResolver);\\n        futuresManager = IFuturesMarketManager(\\n            addressResolver.requireAndGetAddress(\\n                FUTURES_MANAGER,\\n                \\\"MarginBase: Could not get Futures Market Manager\\\"\\n            )\\n        );\\n        marginAsset = IERC20(_marginAsset);\\n\\n        /// @dev MarginBaseSettings must exist prior to MarginBase account creation\\n        marginBaseSettings = MarginBaseSettings(_marginBaseSettings);\\n\\n        /// @dev the Ownable constructor is never called when we create minimal proxies\\n        _transferOwnership(msg.sender);\\n\\n        ops = _ops;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Views\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice get number of active market positions account has\\n    /// @return number of positions which are currently active for account\\n    function getNumberOfActivePositions() external view returns (uint256) {\\n        return activeMarketKeys.length;\\n    }\\n\\n    /// @notice get all active market positions\\n    /// @return positions which are currently active for account (ActiveMarketPosition structs)\\n    function getAllActiveMarketPositions()\\n        external\\n        view\\n        returns (ActiveMarketPosition[] memory)\\n    {\\n        ActiveMarketPosition[] memory positions = new ActiveMarketPosition[](\\n            activeMarketKeys.length\\n        );\\n        for (uint16 i = 0; i < activeMarketKeys.length; i++) {\\n            positions[i] = (activeMarketPositions[activeMarketKeys[i]]);\\n        }\\n        return positions;\\n    }\\n\\n    /// @notice the current withdrawable or usable balance\\n    function freeMargin() public view returns (uint256) {\\n        return marginAsset.balanceOf(address(this)) - committedMargin;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Account Deposit & Withdraw\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @param _amount: amount of marginAsset to deposit into marginBase account\\n    function deposit(uint256 _amount) external onlyOwner {\\n        /// @notice amount deposited into account cannot be zero\\n        if (_amount == 0) {\\n            revert AmountCantBeZero();\\n        }\\n\\n        // transfer in margin asset from user\\n        // (will revert if user does not have amount specified)\\n        require(\\n            marginAsset.transferFrom(owner(), address(this), _amount),\\n            \\\"MarginBase: deposit failed\\\"\\n        );\\n\\n        emit Deposit(msg.sender, _amount);\\n    }\\n\\n    /// @param _amount: amount of marginAsset to withdraw from marginBase account\\n    function withdraw(uint256 _amount) external onlyOwner {\\n        /// @notice amount withdrawn from account cannot be zero\\n        if (_amount == 0) {\\n            revert AmountCantBeZero();\\n        }\\n\\n        // make sure committed margin isn't withdrawn\\n        if (_amount > freeMargin()) {\\n            revert InsufficientFreeMargin(freeMargin(), _amount);\\n        }\\n\\n        // transfer out margin asset to user\\n        // (will revert if account does not have amount specified)\\n        require(\\n            marginAsset.transfer(owner(), _amount),\\n            \\\"MarginBase: withdraw failed\\\"\\n        );\\n\\n        emit Withdraw(msg.sender, _amount);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Margin Distribution\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice distribute margin across all/some positions specified via _newPositions\\n    /// @dev _newPositions may contain any number of new or existing positions\\n    /// @dev caller can close and withdraw all margin from position if _newPositions[i].isClosing is true\\n    /// @param _newPositions: an array of UpdateMarketPositionSpec's used to modify active market positions\\n    function distributeMargin(UpdateMarketPositionSpec[] memory _newPositions)\\n        external\\n        onlyOwner\\n    {\\n        _distributeMargin(_newPositions);\\n    }\\n\\n    function _distributeMargin(UpdateMarketPositionSpec[] memory _newPositions)\\n        internal\\n    {\\n        /// @notice limit size of new position specs passed into distribute margin\\n        if (_newPositions.length > type(uint16).max) {\\n            revert MaxNewPositionsExceeded(_newPositions.length);\\n        }\\n\\n        /// @notice tracking variable for calculating fee(s) based on margin delta\\n        /// @dev margin delta: total margin deposited/withdrawn across ALL new positions\\n        uint256 totalMarginDelta = 0;\\n\\n        // for each new position in _newPositions, distribute margin accordingly and update state\\n        for (uint16 i = 0; i < _newPositions.length; i++) {\\n            if (_newPositions[i].isClosing) {\\n                /// @notice close position and transfer margin back to account\\n                totalMarginDelta += closePositionAndWithdraw(\\n                    _newPositions[i].marketKey\\n                );\\n            } else if (_newPositions[i].marginDelta < 0) {\\n                /// @notice remove margin from market and potentially adjust size\\n                totalMarginDelta += modifyPositionForMarketAndWithdraw(\\n                    _newPositions[i].marginDelta,\\n                    _newPositions[i].sizeDelta,\\n                    _newPositions[i].marketKey\\n                );\\n            } else {\\n                /// @dev marginDelta >= 0\\n                /// @notice deposit margin into market and potentially adjust size\\n                totalMarginDelta += depositAndModifyPositionForMarket(\\n                    _newPositions[i].marginDelta,\\n                    _newPositions[i].sizeDelta,\\n                    _newPositions[i].marketKey\\n                );\\n                // if marginDelta is 0, there will simply be NO additional\\n                // margin deposited into the market\\n            }\\n        }\\n\\n        /// @notice impose fee: send fee to Kwenta's treasury IF margin was deposited/withdrawn\\n        if (totalMarginDelta > 0) {\\n            require(\\n                marginAsset.transfer(\\n                    marginBaseSettings.treasury(),\\n                    (totalMarginDelta * marginBaseSettings.distributionFee()) /\\n                        MAX_BPS\\n                ),\\n                \\\"MarginBase: unable to pay fee\\\"\\n            );\\n        }\\n    }\\n\\n    // @TODO https://github.com/Kwenta/margin-manager/issues/12\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    Internal Margin Distribution\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice deposit margin into specific market, creating/adding to a position\\n    /// @dev _depositSize can NEVER be negative\\n    /// @dev both _depositSize and _sizeDelta could be zero (i.e. market position goes unchanged)\\n    /// @param _depositSize: size of deposit in sUSD\\n    /// @param _sizeDelta: size and position type (long//short) denoted in market synth (ex: sETH)\\n    /// @param _marketKey: synthetix futures market id/key\\n    /// @return marginMoved total margin moved in function call \\n    function depositAndModifyPositionForMarket(\\n        int256 _depositSize,\\n        int256 _sizeDelta,\\n        bytes32 _marketKey\\n    ) internal returns (uint256 marginMoved) {\\n        // define market via _marketKey\\n        IFuturesMarket market = futuresMarket(_marketKey);\\n\\n        /// @dev if _depositSize is not 0, then we must:\\n        /// (1) impose correct fee\\n        /// (2) transfer _depositSize (new margin) into the market\\n        if (_depositSize > 0) {\\n            /// @notice marginMoved used to calculate fee based on _depositSize\\n            marginMoved = _abs(_depositSize);\\n\\n            // make sure committed margin isn't deposited\\n            if (marginMoved > freeMargin()) {\\n                revert InsufficientFreeMargin(freeMargin(), marginMoved);\\n            }\\n\\n            /// @notice alter the amount of margin in specific market position\\n            /// @dev positive input triggers a deposit; a negative one, a withdrawal\\n            market.transferMargin(_depositSize);\\n        }\\n\\n        /// @dev if _sizeDelta is 0, then we do not want to modify position size, only margin\\n        if (_sizeDelta != 0) {\\n            // modify position in specific market with KWENTA tracking code\\n            market.modifyPositionWithTracking(_sizeDelta, TRACKING_CODE);\\n        }\\n\\n        // fetch new position data from Synthetix\\n        (, , uint128 margin, , int128 size) = market.positions(address(this));\\n\\n        // update state for given open market position\\n        marginMoved += updateActiveMarketPosition(_marketKey, margin, size, market);\\n    }\\n\\n    /// @notice modify active position and withdraw marginAsset from market into this account\\n    /// @dev _withdrawalSize can NEVER be positive NOR zero\\n    /// @dev _sizeDelta could be zero\\n    /// @param _withdrawalSize: size of sUSD to withdraw from market into account\\n    /// @param _sizeDelta: size and position type (long//short) denoted in market synth (ex: sETH)\\n    /// @param _marketKey: synthetix futures market id/key\\n    /// @return marginMoved total margin moved in function call\\n    function modifyPositionForMarketAndWithdraw(\\n        int256 _withdrawalSize,\\n        int256 _sizeDelta,\\n        bytes32 _marketKey\\n    ) internal returns (uint256 marginMoved) {\\n        // define market via _marketKey\\n        IFuturesMarket market = futuresMarket(_marketKey);\\n\\n        /// @notice marginMoved used to calculate fee based on _withdrawalSize\\n        marginMoved = _abs(_withdrawalSize);\\n\\n        /// @dev if _sizeDelta is 0, then we do not want to modify position size, only margin\\n        if (_sizeDelta != 0) {\\n            // modify position in specific market with KWENTA tracking code\\n            market.modifyPositionWithTracking(_sizeDelta, TRACKING_CODE);\\n        }\\n\\n        /// @notice alter the amount of margin in specific market position\\n        /// @dev positive input triggers a deposit; a negative one, a withdrawal\\n        market.transferMargin(_withdrawalSize);\\n\\n        // fetch new position data from Synthetix\\n        (, , uint128 margin, , int128 size) = market.positions(address(this));\\n\\n        // update state for given open market position\\n        marginMoved += updateActiveMarketPosition(_marketKey, margin, size, market);\\n    }\\n\\n    /// @notice closes futures position and withdraws all margin in that market back to this account\\n    /// @param _marketKey: synthetix futures market id/key\\n    /// @return marginMoved total margin moved in function call\\n    function closePositionAndWithdraw(bytes32 _marketKey)\\n        internal\\n        returns (uint256 marginMoved)\\n    {\\n        // update state (remove market)\\n        removeActiveMarketPositon(_marketKey);\\n\\n        // define market via _marketKey\\n        IFuturesMarket market = futuresMarket(_marketKey);\\n\\n        // close market position\\n        market.closePosition();\\n\\n        // fetch position data from Synthetix\\n        (, , uint128 margin, , ) = market.positions(address(this));\\n\\n        /// @notice marginMoved used to calculate fee based on margin in market being closed\\n        marginMoved = margin;\\n\\n        // withdraw margin back to this account\\n        market.withdrawAllMargin();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    Internal Account State Management\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice used internally to update contract state for the account's active position tracking\\n    /// @dev parameters are generated and passed to this function via Synthetix Futures' contracts\\n    /// @dev if _size becomes 0, remove position from account state and withdraw margin (only non-\\\"internal\\\" logic in below code)\\n    /// @param _marketKey: key for synthetix futures market\\n    /// @param _margin: amount of margin the specific market position has\\n    /// @param _size: represents size of position (i.e. accounts for leverage)\\n    /// @return marginMoved total margin moved in function call\\n    function updateActiveMarketPosition(\\n        bytes32 _marketKey,\\n        uint128 _margin,\\n        int128 _size,\\n        IFuturesMarket market\\n    ) internal returns (uint256 marginMoved) {\\n        // if position size is 0, position is effectively closed on\\n        // FuturesMarket but margin is still in contract, thus it must\\n        // be withdrawn back to this account\\n        if (_size == 0) {\\n            // update state (remove market)\\n            removeActiveMarketPositon(_marketKey);\\n\\n            /// @notice marginMoved used to calculate fee based on margin in market being closed\\n            marginMoved = _margin;\\n\\n            // withdraw margin back to this account\\n            market.withdrawAllMargin();\\n            return marginMoved;\\n        }\\n\\n        ActiveMarketPosition memory newPosition = ActiveMarketPosition(\\n            _marketKey,\\n            _margin,\\n            _size\\n        );\\n\\n        // check if this is updating a position or creating one\\n        if (activeMarketPositions[_marketKey].marketKey == 0) {\\n            activeMarketKeys.push(_marketKey);\\n        }\\n\\n        // update state of active market positions\\n        activeMarketPositions[_marketKey] = newPosition;\\n    }\\n\\n    /// @notice used internally to remove active market position from contract's internal state\\n    /// @param _marketKey: key for previously active market position\\n    function removeActiveMarketPositon(bytes32 _marketKey) internal {\\n        // ensure active market exists\\n        if (activeMarketPositions[_marketKey].marketKey == 0) {\\n            revert MissingMarketKey(_marketKey);\\n        }\\n\\n        delete activeMarketPositions[_marketKey];\\n        uint256 numberOfActiveMarkets = activeMarketKeys.length;\\n\\n        for (uint16 i = 0; i < numberOfActiveMarkets; i++) {\\n            // once _marketKey is encountered, swap with\\n            // last element in array and exit for-loop\\n            if (activeMarketKeys[i] == _marketKey) {\\n                /// @dev effectively removes _marketKey from activeMarketKeys\\n                activeMarketKeys[i] = activeMarketKeys[\\n                    numberOfActiveMarkets - 1\\n                ];\\n                break;\\n            }\\n        }\\n        // remove last element now that it has been copied\\n        activeMarketKeys.pop();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Internal Getter Utilities\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice addressResolver fetches IFuturesMarket address for specific market\\n    /// @param _marketKey: key for synthetix futures market\\n    /// @return IFuturesMarket contract interface\\n    function futuresMarket(bytes32 _marketKey)\\n        internal\\n        view\\n        returns (IFuturesMarket)\\n    {\\n        return IFuturesMarket(futuresManager.marketForKey(_marketKey));\\n    }\\n\\n    /// @notice exchangeRates() fetches current ExchangeRates contract\\n    function exchangeRates() internal view returns (IExchangeRates) {\\n        return\\n            IExchangeRates(\\n                addressResolver.requireAndGetAddress(\\n                    \\\"ExchangeRates\\\",\\n                    \\\"MarginBase: Could not get ExchangeRates\\\"\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Limit Orders\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice limit order logic condition checker\\n    /// @param _orderId: key for an active order\\n    function validOrder(uint256 _orderId) public view returns (bool) {\\n        Order memory order = orders[_orderId];\\n\\n        bytes32 currencyKey = futuresMarket(order.marketKey).baseAsset();\\n        // Get exchange rate for 1 unit\\n        uint256 price = exchangeRates().effectiveValue(currencyKey, 1e18, SUSD);\\n\\n        if (order.sizeDelta > 0) {\\n            // Long\\n            return price <= order.desiredPrice;\\n        } else if (order.sizeDelta < 0) {\\n            // Short\\n            return price >= order.desiredPrice;\\n        } else {\\n            revert(\\\"Order size 0\\\");\\n        }\\n    }\\n\\n    /// @notice register a limit order internally and with gelato\\n    /// @param _marketKey: synthetix futures market id/key\\n    /// @param _marginDelta: amount of margin (in sUSD) to deposit or withdraw\\n    /// @param _sizeDelta: denoted in market currency (i.e. ETH, BTC, etc), size of futures position\\n    /// @param _limitPrice: expected limit order price\\n    /// @return orderId contract interface\\n    function placeOrder(\\n        bytes32 _marketKey,\\n        int256 _marginDelta,\\n        int256 _sizeDelta,\\n        uint256 _limitPrice\\n    ) external onlyOwner returns (uint256) {\\n        // if more margin is desired on the position we must commit the margin\\n        if (_marginDelta > 0) {\\n            // ensure margin doesn't exceed max\\n            if (_abs(_marginDelta) > freeMargin()) {\\n                revert InsufficientFreeMargin(freeMargin(), _abs(_marginDelta));\\n            }\\n            committedMargin += _abs(_marginDelta);\\n        }\\n\\n        bytes32 taskId = IOps(ops).createTask(\\n            address(this), // execution function address\\n            this.executeOrder.selector, // execution function selector\\n            address(this), // checker (resolver) address\\n            abi.encodeWithSelector(this.checker.selector, orderId) // checker (resolver) calldata\\n        );\\n\\n        orders[orderId] = Order({\\n            marketKey: _marketKey,\\n            marginDelta: _marginDelta,\\n            sizeDelta: _sizeDelta,\\n            desiredPrice: _limitPrice,\\n            gelatoTaskId: taskId\\n        });\\n\\n        return orderId++;\\n    }\\n\\n    /// @notice cancel a gelato queued order\\n    /// @param _orderId: key for an active order\\n    function cancelOrder(uint256 _orderId) external onlyOwner {\\n        Order memory order = orders[_orderId];\\n\\n        // if margin was committed, free it\\n        if (order.marginDelta > 0) {\\n            committedMargin -= _abs(order.marginDelta);\\n        }\\n        IOps(ops).cancelTask(order.gelatoTaskId);\\n\\n        // delete order from orders\\n        delete orders[_orderId];\\n    }\\n\\n    /// @notice execute a gelato queued order\\n    /// @notice only keepers can trigger this function\\n    /// @param _orderId: key for an active order\\n    function executeOrder(uint256 _orderId) external onlyOps {\\n        require(validOrder(_orderId), \\\"Order not ready for execution\\\");\\n        Order memory order = orders[_orderId];\\n\\n        // if margin was committed, free it\\n        if (order.marginDelta > 0) {\\n            committedMargin -= _abs(order.marginDelta);\\n        }\\n\\n        // prep new position\\n        MarginBase.UpdateMarketPositionSpec[]\\n            memory newPositions = new MarginBase.UpdateMarketPositionSpec[](1);\\n        newPositions[0] = MarginBase.UpdateMarketPositionSpec(\\n            order.marketKey,\\n            order.marginDelta,\\n            order.sizeDelta,\\n            false // assume the position will be closed if the limit order is the opposite size\\n        );\\n\\n        // delete order from orders\\n        delete orders[_orderId];\\n\\n        // execute trade\\n        _distributeMargin(newPositions);\\n\\n        // pay fee\\n        (uint256 fee, address feeToken) = IOps(ops).getFeeDetails();\\n        _transfer(fee, feeToken);\\n    }\\n\\n    /// @notice signal to a keeper that an order is valid/invalid for execution\\n    /// @param _orderId: key for an active order\\n    /// @return canExec boolean that signals to keeper an order can be executed\\n    /// @return execPayload calldata for executing an order\\n    function checker(uint256 _orderId)\\n        external\\n        view\\n        returns (bool canExec, bytes memory execPayload)\\n    {\\n        canExec = validOrder(_orderId);\\n        // calldata for execute func\\n        execPayload = abi.encodeWithSelector(\\n            this.executeOrder.selector,\\n            _orderId\\n        );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    Utility Functions\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Absolute value of the input, returned as an unsigned number.\\n    /// @param x: signed number\\n    function _abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x < 0 ? -x : x);\\n    }\\n}\\n\",\"keccak256\":\"0x7f718b30d357b0603d87547be013849d2a6f0976225719bdd15b6d18676a2e23\",\"license\":\"GPL-3.0-or-later\"},\"contracts/MarginBaseSettings.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title Kwenta Settings for MarginBase Accounts\\n/// @author JaredBorders (jaredborders@proton.me), JChiaramonte7 (jeremy@bytecode.llc)\\n/// @notice Contract (owned by the deployer) for controlling the settings of MarginBase account(s)\\n/// @dev This contract will require deployment prior to MarginBase account creation\\ncontract MarginBaseSettings is Ownable {\\n    /*///////////////////////////////////////////////////////////////\\n                                Constants\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice decimals calculations\\n    uint256 private constant MAX_BPS = 10000;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Settings\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    // @notice Kwenta's Treasury Address\\n    address public treasury;\\n\\n    /// @notice denoted in Basis points (BPS) (One basis point is equal to 1/100th of 1%)\\n    /// @dev fee imposed on calls to distributeMargin()\\n    uint256 public distributionFee;\\n\\n    /// @notice denoted in Basis points (BPS) (One basis point is equal to 1/100th of 1%)\\n    /// @dev fee imposed on limit orders\\n    uint256 public limitOrderFee;\\n\\n    /// @notice denoted in Basis points (BPS) (One basis point is equal to 1/100th of 1%)\\n    /// @dev fee imposed on stop losses\\n    uint256 public stopLossFee;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Events\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice emitted after changing treasury address\\n    /// @param treasury: new treasury address\\n    event TreasuryAddressChanged(address treasury);\\n\\n    /// @notice emitted after a successful distribution fee change\\n    /// @param fee: fee denoted in BPS\\n    event DistributionFeeChanged(uint256 fee);\\n\\n    /// @notice emitted after a successful limit order fee change\\n    /// @param fee: fee denoted in BPS\\n    event LimitOrderFeeChanged(uint256 fee);\\n\\n    /// @notice emitted after a successful stop loss fee change\\n    /// @param fee: fee denoted in BPS\\n    event StopLossFeeChanged(uint256 fee);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Errors\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice zero address cannot be used\\n    error ZeroAddress();\\n\\n    /// @notice invalid distribution fee\\n    /// @param fee: fee denoted in BPS\\n    error InvalidDistributionFee(uint256 fee);\\n\\n    /// @notice invalid limit order fee\\n    /// @param fee: fee denoted in BPS\\n    error InvalidLimitOrderFee(uint256 fee);\\n\\n    /// @notice invalid stop loss fee\\n    /// @param fee: fee denoted in BPS\\n    error InvalidStopLossFee(uint256 fee);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Constructor\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice set initial fee imposed on calls to MarginBase.distributeMargin()\\n    /// @param _treasury: Kwenta's Treasury Address\\n    /// @param _distributionFee: fee denoted in BPS\\n    /// @param _limitOrderFee: fee denoted in BPS\\n    /// @param _stopLossFee: fee denoted in BPS\\n    constructor(\\n        address _treasury,\\n        uint256 _distributionFee,\\n        uint256 _limitOrderFee,\\n        uint256 _stopLossFee\\n    ) {\\n        /// @notice ensure valid address for Kwenta Treasury\\n        if (_treasury == address(0)) { revert ZeroAddress(); }\\n        \\n        /// @notice set Kwenta Treasury address \\n        treasury = _treasury;\\n\\n        /// @notice ensure valid fees\\n        if (_distributionFee >= MAX_BPS) { revert InvalidDistributionFee(_distributionFee); }\\n        if (_limitOrderFee >= MAX_BPS) { revert InvalidLimitOrderFee(_limitOrderFee); }\\n        if (_stopLossFee >= MAX_BPS) { revert InvalidStopLossFee(_stopLossFee); }\\n\\n        /// @notice set initial fees\\n        distributionFee = _distributionFee;\\n        limitOrderFee = _limitOrderFee;\\n        stopLossFee = _stopLossFee;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Setters\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice set new treasury address\\n    /// @param _treasury: new treasury address\\n    function setTreasury(address _treasury) external onlyOwner {\\n        /// @notice ensure valid address for Kwenta Treasury\\n        if (_treasury == address(0)) { revert ZeroAddress(); }\\n\\n        /// @notice set Kwenta Treasury address\\n        treasury = _treasury;\\n\\n        emit TreasuryAddressChanged(_treasury);\\n    }\\n\\n    /// @notice set new distribution fee\\n    /// @param _fee: fee denoted in BPS\\n    function setDistributionFee(uint256 _fee) external onlyOwner {\\n        /// @notice ensure valid fee\\n        if (_fee >= MAX_BPS) { revert InvalidDistributionFee(_fee); }\\n\\n        /// @notice set fee\\n        distributionFee = _fee;\\n\\n        emit DistributionFeeChanged(distributionFee);\\n    }\\n\\n    /// @notice set new limit order fee\\n    /// @param _fee: fee denoted in BPS\\n    function setLimitOrderFee(uint256 _fee) external onlyOwner {\\n        /// @notice ensure valid fee\\n        if (_fee >= MAX_BPS) { revert InvalidLimitOrderFee(_fee); }\\n\\n        /// @notice set fee\\n        limitOrderFee = _fee;\\n\\n        emit LimitOrderFeeChanged(limitOrderFee);\\n    }\\n\\n    /// @notice set new stop loss fee\\n    /// @param _fee: fee denoted in BPS\\n    function setStopLossFee(uint256 _fee) external onlyOwner {\\n        /// @notice ensure valid fee\\n        if (_fee >= MAX_BPS) { revert InvalidStopLossFee(_fee); }\\n\\n        /// @notice set fee\\n        stopLossFee = _fee;\\n\\n        emit StopLossFeeChanged(stopLossFee);\\n    }\\n}\\n\",\"keccak256\":\"0xdcb0d6dc224f7dfc2eb4ca02ca10160e2e4c50fdfd9639f660149ef4fb4245e9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/iaddressresolver\\ninterface IAddressResolver {\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getSynth(bytes32 key) external view returns (address);\\n\\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address);\\n}\",\"keccak256\":\"0x1ce5b918283eb1941981d1e0716280757aac4536da653d049c7e43b176620346\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IExchangeRates.sol\":{\"content\":\"pragma solidity >=0.4.24;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/iexchangerates\\ninterface IExchangeRates {\\n    // Structs\\n    struct RateAndUpdatedTime {\\n        uint216 rate;\\n        uint40 time;\\n    }\\n\\n    // Views\\n    function aggregators(bytes32 currencyKey) external view returns (address);\\n\\n    function aggregatorWarningFlags() external view returns (address);\\n\\n    function anyRateIsInvalid(bytes32[] calldata currencyKeys) external view returns (bool);\\n\\n    function anyRateIsInvalidAtRound(bytes32[] calldata currencyKeys, uint[] calldata roundIds) external view returns (bool);\\n\\n    function currenciesUsingAggregator(address aggregator) external view returns (bytes32[] memory);\\n\\n    function effectiveValue(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    ) external view returns (uint value);\\n\\n    function effectiveValueAndRates(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    )\\n        external\\n        view\\n        returns (\\n            uint value,\\n            uint sourceRate,\\n            uint destinationRate\\n        );\\n\\n    function effectiveValueAndRatesAtRound(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        uint roundIdForSrc,\\n        uint roundIdForDest\\n    )\\n        external\\n        view\\n        returns (\\n            uint value,\\n            uint sourceRate,\\n            uint destinationRate\\n        );\\n\\n    function effectiveAtomicValueAndRates(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    )\\n        external\\n        view\\n        returns (\\n            uint value,\\n            uint systemValue,\\n            uint systemSourceRate,\\n            uint systemDestinationRate\\n        );\\n\\n    function getCurrentRoundId(bytes32 currencyKey) external view returns (uint);\\n\\n    function getLastRoundIdBeforeElapsedSecs(\\n        bytes32 currencyKey,\\n        uint startingRoundId,\\n        uint startingTimestamp,\\n        uint timediff\\n    ) external view returns (uint);\\n\\n    function lastRateUpdateTimes(bytes32 currencyKey) external view returns (uint256);\\n\\n    function rateAndTimestampAtRound(bytes32 currencyKey, uint roundId) external view returns (uint rate, uint time);\\n\\n    function rateAndUpdatedTime(bytes32 currencyKey) external view returns (uint rate, uint time);\\n\\n    function rateAndInvalid(bytes32 currencyKey) external view returns (uint rate, bool isInvalid);\\n\\n    function rateForCurrency(bytes32 currencyKey) external view returns (uint);\\n\\n    function rateIsFlagged(bytes32 currencyKey) external view returns (bool);\\n\\n    function rateIsInvalid(bytes32 currencyKey) external view returns (bool);\\n\\n    function rateIsStale(bytes32 currencyKey) external view returns (bool);\\n\\n    function rateStalePeriod() external view returns (uint);\\n\\n    function ratesAndUpdatedTimeForCurrencyLastNRounds(\\n        bytes32 currencyKey,\\n        uint numRounds,\\n        uint roundId\\n    ) external view returns (uint[] memory rates, uint[] memory times);\\n\\n    function ratesAndInvalidForCurrencies(bytes32[] calldata currencyKeys)\\n        external\\n        view\\n        returns (uint[] memory rates, bool anyRateInvalid);\\n\\n    function ratesForCurrencies(bytes32[] calldata currencyKeys) external view returns (uint[] memory);\\n\\n    function synthTooVolatileForAtomicExchange(bytes32 currencyKey) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5f54ff159a1ab96e96ebc4ab33ec8ab228b7caa19ba00b43f180781123202487\"},\"contracts/interfaces/IFuturesMarket.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\nimport \\\"./IFuturesMarketBaseTypes.sol\\\";\\n\\ninterface IFuturesMarket {\\n    /* ========== FUNCTION INTERFACE ========== */\\n\\n    /* ---------- Market Details ---------- */\\n\\n    function marketKey() external view returns (bytes32 key);\\n\\n    function baseAsset() external view returns (bytes32 key);\\n\\n    function marketSize() external view returns (uint128 size);\\n\\n    function marketSkew() external view returns (int128 skew);\\n\\n    function fundingLastRecomputed() external view returns (uint32 timestamp);\\n\\n    function fundingSequence(uint index) external view returns (int128 netFunding);\\n\\n    function positions(address account)\\n        external\\n        view\\n        returns (\\n            uint64 id,\\n            uint64 fundingIndex,\\n            uint128 margin,\\n            uint128 lastPrice,\\n            int128 size\\n        );\\n\\n    function assetPrice() external view returns (uint price, bool invalid);\\n\\n    function marketSizes() external view returns (uint long, uint short);\\n\\n    function marketDebt() external view returns (uint debt, bool isInvalid);\\n\\n    function currentFundingRate() external view returns (int fundingRate);\\n\\n    function unrecordedFunding() external view returns (int funding, bool invalid);\\n\\n    function fundingSequenceLength() external view returns (uint length);\\n\\n    /* ---------- Position Details ---------- */\\n\\n    function notionalValue(address account) external view returns (int value, bool invalid);\\n\\n    function profitLoss(address account) external view returns (int pnl, bool invalid);\\n\\n    function accruedFunding(address account) external view returns (int funding, bool invalid);\\n\\n    function remainingMargin(address account) external view returns (uint marginRemaining, bool invalid);\\n\\n    function accessibleMargin(address account) external view returns (uint marginAccessible, bool invalid);\\n\\n    function liquidationPrice(address account) external view returns (uint price, bool invalid);\\n\\n    function liquidationFee(address account) external view returns (uint);\\n\\n    function canLiquidate(address account) external view returns (bool);\\n\\n    function orderFee(int sizeDelta) external view returns (uint fee, bool invalid);\\n\\n    function postTradeDetails(int sizeDelta, address sender)\\n        external\\n        view\\n        returns (\\n            uint margin,\\n            int size,\\n            uint price,\\n            uint liqPrice,\\n            uint fee,\\n            IFuturesMarketBaseTypes.Status status\\n        );\\n\\n    /* ---------- Market Operations ---------- */\\n\\n    function recomputeFunding() external returns (uint lastIndex);\\n\\n    function transferMargin(int marginDelta) external;\\n\\n    function withdrawAllMargin() external;\\n\\n    function modifyPosition(int sizeDelta) external;\\n\\n    function modifyPositionWithTracking(int sizeDelta, bytes32 trackingCode) external;\\n\\n    function submitNextPriceOrder(int sizeDelta) external;\\n\\n    function submitNextPriceOrderWithTracking(int sizeDelta, bytes32 trackingCode) external;\\n\\n    function cancelNextPriceOrder(address account) external;\\n\\n    function executeNextPriceOrder(address account) external;\\n\\n    function closePosition() external;\\n\\n    function closePositionWithTracking(bytes32 trackingCode) external;\\n\\n    function liquidatePosition(address account) external;\\n}\\n\",\"keccak256\":\"0x0cbba2f1f765197008c04b4d7448720ed9f96c0ec66fb370e80fe3e4c334871b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IFuturesMarketBaseTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\ninterface IFuturesMarketBaseTypes {\\n    /* ========== TYPES ========== */\\n\\n    enum Status {\\n        Ok,\\n        InvalidPrice,\\n        PriceOutOfBounds,\\n        CanLiquidate,\\n        CannotLiquidate,\\n        MaxMarketSizeExceeded,\\n        MaxLeverageExceeded,\\n        InsufficientMargin,\\n        NotPermitted,\\n        NilOrder,\\n        NoPositionOpen,\\n        PriceTooVolatile\\n    }\\n\\n    // If margin/size are positive, the position is long; if negative then it is short.\\n    struct Position {\\n        uint64 id;\\n        uint64 lastFundingIndex;\\n        uint128 margin;\\n        uint128 lastPrice;\\n        int128 size;\\n    }\\n\\n    // next-price order storage\\n    struct NextPriceOrder {\\n        int128 sizeDelta; // difference in position to pass to modifyPosition\\n        uint128 targetRoundId; // price oracle roundId using which price this order needs to exucted\\n        uint128 commitDeposit; // the commitDeposit paid upon submitting that needs to be refunded if order succeeds\\n        uint128 keeperDeposit; // the keeperDeposit paid upon submitting that needs to be paid / refunded on tx confirmation\\n        bytes32 trackingCode; // tracking code to emit on execution for volume source fee sharing\\n    }\\n}\\n\",\"keccak256\":\"0x65e49e0cf818bbbb611318b12f2246b9af7888e3de203ad9d8f0f9c5af0b9817\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IFuturesMarketManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\ninterface IFuturesMarketManager {\\n    function markets(uint index, uint pageSize) external view returns (address[] memory);\\n\\n    function numMarkets() external view returns (uint);\\n\\n    function allMarkets() external view returns (address[] memory);\\n\\n    function marketForKey(bytes32 marketKey) external view returns (address);\\n\\n    function marketsForKeys(bytes32[] calldata marketKeys) external view returns (address[] memory);\\n\\n    function totalDebt() external view returns (uint debt, bool isInvalid);\\n}\",\"keccak256\":\"0x30b60e670e95e3f9096232f51bd21abd8c12f0dc8cfffe3cff79aad7f714fe31\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/MinimalProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ncontract MinimalProxyFactory {\\n    function _cloneAsMinimalProxy(address _base, string memory _revertMsg)\\n        internal\\n        returns (address clone)\\n    {\\n        bytes memory createData = _generateMinimalProxyCreateData(_base);\\n\\n        assembly {\\n            clone := create(\\n                0, // no value\\n                add(createData, 0x20), // data\\n                55 // data is always 55 bytes (10 constructor + 45 code)\\n            )\\n        }\\n\\n        // If CREATE fails for some reason, address(0) is returned\\n        require(clone != address(0), _revertMsg);\\n    }\\n\\n    function _generateMinimalProxyCreateData(address _base)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encodePacked(\\n                //---- constructor -----\\n                bytes10(0x3d602d80600a3d3981f3),\\n                //---- proxy code -----\\n                bytes10(0x363d3d373d3d3d363d73),\\n                _base,\\n                bytes15(0x5af43d82803e903d91602b57fd5bf3)\\n            );\\n    }\\n}\",\"keccak256\":\"0xcc04c9232bc04c01a000fccbbaed391acccec5817b3eff994d077f4319fdeaff\",\"license\":\"MIT\"},\"contracts/utils/MinimalProxyable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract MinimalProxyable is Ownable {\\n\\n    bool masterCopy;\\n    bool initialized;\\n\\n    constructor() {\\n        masterCopy = true;\\n    }\\n\\n    function initialize() public initOnce {}\\n\\n    modifier initOnce {\\n        require(!masterCopy, \\\"Cannot initialize implementation\\\");\\n        require(!initialized, \\\"Already initialized\\\");\\n        initialized = true;\\n        _;\\n    }\\n\\n}\",\"keccak256\":\"0xfa99c61553ada20347d354b15cfa016bc7d48edb120c9bd3722f687a8adea244\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/OpsReady.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport {\\n    SafeERC20,\\n    IERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ninterface IOps {\\n    function gelato() external view returns (address payable);\\n    \\n    function createTask(\\n        address _execAddress,\\n        bytes4 _execSelector,\\n        address _resolverAddress,\\n        bytes calldata _resolverData\\n    ) external returns (bytes32 task);\\n\\n    function cancelTask(bytes32 _taskId) external;\\n\\n    function getFeeDetails() external view returns (uint256, address);\\n}\\n\\nabstract contract OpsReady {\\n    address public ops;\\n    address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    modifier onlyOps() {\\n        require(msg.sender == ops, \\\"OpsReady: onlyOps\\\");\\n        _;\\n    }\\n\\n    function gelato() public view returns (address payable) {\\n        return IOps(ops).gelato();\\n    }\\n\\n    function _transfer(uint256 _amount, address _paymentToken) internal {\\n        if (_paymentToken == ETH) {\\n            (bool success, ) = gelato().call{value: _amount}(\\\"\\\");\\n            require(success, \\\"_transfer: ETH transfer failed\\\");\\n        } else {\\n            SafeERC20.safeTransfer(IERC20(_paymentToken), gelato(), _amount);\\n        }\\n    }\\n}\",\"keccak256\":\"0x6998efacce08379d243a4bdb8c54f5aa960305aa574d2fdf9f88567b67746b8a\",\"license\":\"UNLICENSED\"}},\"version\":1}",
    "bytecode": "0x6101006040523480156200001257600080fd5b5060405162005ad638038062005ad683398181016040528101906200003891906200049d565b84600090805190602001906200005092919062000198565b506040516200005f9062000229565b604051809103906000f0801580156200007c573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250505050505050620005a8565b828054620001a69062000573565b90600052602060002090601f016020900481019282620001ca576000855562000216565b82601f10620001e557805160ff191683800117855562000216565b8280016001018555821562000216579182015b8281111562000215578251825591602001919060010190620001f8565b5b50905062000225919062000237565b5090565b614b268062000fb083390190565b5b808211156200025257600081600090555060010162000238565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002bf8262000274565b810181811067ffffffffffffffff82111715620002e157620002e062000285565b5b80604052505050565b6000620002f662000256565b9050620003048282620002b4565b919050565b600067ffffffffffffffff82111562000327576200032662000285565b5b620003328262000274565b9050602081019050919050565b60005b838110156200035f57808201518184015260208101905062000342565b838111156200036f576000848401525b50505050565b60006200038c620003868462000309565b620002ea565b905082815260208101848484011115620003ab57620003aa6200026f565b5b620003b88482856200033f565b509392505050565b600082601f830112620003d857620003d76200026a565b5b8151620003ea84826020860162000375565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200042082620003f3565b9050919050565b620004328162000413565b81146200043e57600080fd5b50565b600081519050620004528162000427565b92915050565b60006200046582620003f3565b9050919050565b620004778162000458565b81146200048357600080fd5b50565b60008151905062000497816200046c565b92915050565b600080600080600060a08688031215620004bc57620004bb62000260565b5b600086015167ffffffffffffffff811115620004dd57620004dc62000265565b5b620004eb88828901620003c0565b9550506020620004fe8882890162000441565b9450506040620005118882890162000441565b9350506060620005248882890162000441565b9250506080620005378882890162000486565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200058c57607f821691505b602082108103620005a257620005a162000544565b5b50919050565b60805160a05160c05160e0516109b2620005fe6000396000818161035b015261048d015260008181610156015261031701526000818161025201526102f601526000818161022e015261027c01526109b26000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80635c60da1b1161005b5780635c60da1b146100dc57806382689cae146100fa578063bf335e6214610118578063e70abe92146101365761007d565b806305a2ee2a1461008257806334b366f9146100a057806354fd4d50146100be575b600080fd5b61008a610154565b60405161009791906105df565b60405180910390f35b6100a8610178565b6040516100b591906105df565b60405180910390f35b6100c661019e565b6040516100d39190610693565b60405180910390f35b6100e461022c565b6040516100f19190610714565b60405180910390f35b610102610250565b60405161010f9190610750565b60405180910390f35b610120610274565b60405161012d91906105df565b60405180910390f35b61013e61048b565b60405161014b919061078c565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080546101ab906107d6565b80601f01602080910402602001604051908101604052809291908181526020018280546101d7906107d6565b80156102245780601f106101f957610100808354040283529160200191610224565b820191906000526020600020905b81548152906001019060200180831161020757829003601f168201915b505050505081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806102d67f00000000000000000000000000000000000000000000000000000000000000006040518060400160405280601081526020017f4372656174696f6e206661696c757265000000000000000000000000000000008152506104af565b90508073ffffffffffffffffffffffffffffffffffffffff1663f8c8765e7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000006040518563ffffffff1660e01b81526004016103999493929190610807565b600060405180830381600087803b1580156103b357600080fd5b505af11580156103c7573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b815260040161040491906105df565b600060405180830381600087803b15801561041e57600080fd5b505af1158015610432573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f14cb25cca821184a88389fa7823ef6a4cd65897a89cbdcf5169542b8d790478b8260405161047c91906105df565b60405180910390a28091505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806104bb84610543565b90506037602082016000f09150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415839061053b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105329190610693565b60405180910390fd5b505092915050565b6060693d602d80600a3d3981f360b01b69363d3d373d3d3d363d7360b01b836e5af43d82803e903d91602b57fd5bf360881b604051602001610588949392919061092e565b6040516020818303038152906040529050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105c98261059e565b9050919050565b6105d9816105be565b82525050565b60006020820190506105f460008301846105d0565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610634578082015181840152602081019050610619565b83811115610643576000848401525b50505050565b6000601f19601f8301169050919050565b6000610665826105fa565b61066f8185610605565b935061067f818560208601610616565b61068881610649565b840191505092915050565b600060208201905081810360008301526106ad818461065a565b905092915050565b6000819050919050565b60006106da6106d56106d08461059e565b6106b5565b61059e565b9050919050565b60006106ec826106bf565b9050919050565b60006106fe826106e1565b9050919050565b61070e816106f3565b82525050565b60006020820190506107296000830184610705565b92915050565b600061073a826106e1565b9050919050565b61074a8161072f565b82525050565b60006020820190506107656000830184610741565b92915050565b60006107768261059e565b9050919050565b6107868161076b565b82525050565b60006020820190506107a1600083018461077d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806107ee57607f821691505b602082108103610801576108006107a7565b5b50919050565b600060808201905061081c60008301876105d0565b61082960208301866105d0565b61083660408301856105d0565b610843606083018461077d565b95945050505050565b60007fffffffffffffffffffff0000000000000000000000000000000000000000000082169050919050565b6000819050919050565b61089361088e8261084c565b610878565b82525050565b60008160601b9050919050565b60006108b182610899565b9050919050565b60006108c3826108a6565b9050919050565b6108db6108d6826105be565b6108b8565b82525050565b60007fffffffffffffffffffffffffffffff000000000000000000000000000000000082169050919050565b6000819050919050565b610928610923826108e1565b61090d565b82525050565b600061093a8287610882565b600a8201915061094a8286610882565b600a8201915061095a82856108ca565b60148201915061096a8284610917565b600f820191508190509594505050505056fea2646970667358221220a5ffd0c35da7e05d933149edaf3c74f780d7149e999f3785d65baab72142888c64736f6c634300080d003360806040523480156200001157600080fd5b5062000032620000266200005360201b60201c565b6200005b60201b60201c565b6001600060146101000a81548160ff0219169083151502179055506200011f565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6149f7806200012f6000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80638da5cb5b116100de578063b6b55f2511610097578063e70abe9211610071578063e70abe9214610456578063ea1d5ae614610474578063f2fde38b146104a4578063f8c8765e146104c05761018e565b8063b6b55f25146103ec578063ce459e6514610408578063e07c09cd146104265761018e565b80638da5cb5b1461031157806394e05b2c1461032f57806394f6113414610360578063a48903371461037c578063a85c38ef1461039a578063ab3ceafa146103ce5761018e565b8063514fcac71161014b578063715018a611610125578063715018a6146102c15780638129fc1c146102cb57806382689cae146102d55780638322fff2146102f35761018e565b8063514fcac714610269578063573ea5751461028557806361383805146102a35761018e565b80630af5c2d014610193578063163de5e5146101c55780632e1a7d4d146101e3578063325314e5146101ff57806334b366f91461022f578063428952af1461024d575b600080fd5b6101ad60048036038101906101a891906130ee565b6104dc565b6040516101bc93929190613171565b60405180910390f35b6101cd61052f565b6040516101da91906131c1565b60405180910390f35b6101fd60048036038101906101f89190613208565b610535565b005b61021960048036038101906102149190613208565b610777565b6040516102269190613235565b60405180910390f35b61023761079b565b60405161024491906132cf565b60405180910390f35b6102676004803603810190610262919061352e565b6107c1565b005b610283600480360381019061027e9190613208565b610849565b005b61028d610a1f565b60405161029a9190613598565b60405180910390f35b6102ab610ab7565b6040516102b891906131c1565b60405180910390f35b6102c9610b67565b005b6102d3610bef565b005b6102dd610cac565b6040516102ea91906135d4565b60405180910390f35b6102fb610cd2565b6040516103089190613610565b60405180910390f35b610319610cea565b6040516103269190613610565b60405180910390f35b61034960048036038101906103449190613208565b610d13565b6040516103579291906136c2565b60405180910390f35b61037a60048036038101906103759190613208565b610d9f565b005b610384611095565b60405161039191906131c1565b60405180910390f35b6103b460048036038101906103af9190613208565b61109b565b6040516103c5959493929190613701565b60405180910390f35b6103d66110d1565b6040516103e391906131c1565b60405180910390f35b61040660048036038101906104019190613208565b6110de565b005b6104106112cd565b60405161041d9190613872565b60405180910390f35b610440600480360381019061043b9190613894565b61142e565b60405161044d91906131c1565b60405180910390f35b61045e6116f5565b60405161046b9190613610565b60405180910390f35b61048e60048036038101906104899190613208565b61171b565b60405161049b91906138fb565b60405180910390f35b6104be60048036038101906104b99190613942565b61191e565b005b6104da60048036038101906104d5919061399b565b611a15565b005b60086020528060005260406000206000915090508060000154908060010160009054906101000a90046fffffffffffffffffffffffffffffffff16908060010160109054906101000a9004600f0b905083565b600a5481565b61053d611d20565b73ffffffffffffffffffffffffffffffffffffffff1661055b610cea565b73ffffffffffffffffffffffffffffffffffffffff16146105b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a890613a5f565b60405180910390fd5b600081036105eb576040517f46f1397d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105f3610ab7565b81111561064057610602610ab7565b816040517f3cb0273a000000000000000000000000000000000000000000000000000000008152600401610637929190613a7f565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610686610cea565b836040518363ffffffff1660e01b81526004016106a4929190613aa8565b6020604051808303816000875af11580156106c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e79190613ae6565b610726576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071d90613b5f565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648260405161076c91906131c1565b60405180910390a250565b6007818154811061078757600080fd5b906000526020600020016000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6107c9611d20565b73ffffffffffffffffffffffffffffffffffffffff166107e7610cea565b73ffffffffffffffffffffffffffffffffffffffff161461083d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083490613a5f565b60405180910390fd5b61084681611d28565b50565b610851611d20565b73ffffffffffffffffffffffffffffffffffffffff1661086f610cea565b73ffffffffffffffffffffffffffffffffffffffff16146108c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bc90613a5f565b60405180910390fd5b6000600960008381526020019081526020016000206040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481525050905060008160200151131561094c576109338160200151612150565b600660008282546109449190613bae565b925050819055505b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ee8ca3b582608001516040518263ffffffff1660e01b81526004016109ab9190613235565b600060405180830381600087803b1580156109c557600080fd5b505af11580156109d9573d6000803e3d6000fd5b5050505060096000838152602001908152602001600020600080820160009055600182016000905560028201600090556003820160009055600482016000905550505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663573ea5756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab29190613bf7565b905090565b6000600654600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b179190613610565b602060405180830381865afa158015610b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b589190613c39565b610b629190613bae565b905090565b610b6f611d20565b73ffffffffffffffffffffffffffffffffffffffff16610b8d610cea565b73ffffffffffffffffffffffffffffffffffffffff1614610be3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bda90613a5f565b60405180910390fd5b610bed6000612171565b565b600060149054906101000a900460ff1615610c3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3690613cb2565b60405180910390fd5b600060159054906101000a900460ff1615610c8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8690613d1e565b60405180910390fd5b6001600060156101000a81548160ff021916908315150217905550565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006060610d208361171b565b91506394f6113460e01b83604051602401610d3b91906131c1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050915091565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2690613d8a565b60405180910390fd5b610e388161171b565b610e77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6e90613df6565b60405180910390fd5b6000600960008381526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050600081602001511315610efe57610ee58160200151612150565b60066000828254610ef69190613bae565b925050819055505b6000600167ffffffffffffffff811115610f1b57610f1a613300565b5b604051908082528060200260200182016040528015610f5457816020015b610f4161303e565b815260200190600190039081610f395790505b50905060405180608001604052808360000151815260200183602001518152602001836040015181526020016000151581525081600081518110610f9b57610f9a613e16565b5b60200260200101819052506009600084815260200190815260200160002060008082016000905560018201600090556002820160009055600382016000905560048201600090555050610fed81611d28565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b810c6366040518163ffffffff1660e01b81526004016040805180830381865afa15801561105c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110809190613e5a565b9150915061108e8282612235565b5050505050565b60065481565b60096020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154905085565b6000600780549050905090565b6110e6611d20565b73ffffffffffffffffffffffffffffffffffffffff16611104610cea565b73ffffffffffffffffffffffffffffffffffffffff161461115a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115190613a5f565b60405180910390fd5b60008103611194576040517f46f1397d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd6111da610cea565b30846040518463ffffffff1660e01b81526004016111fa93929190613e9a565b6020604051808303816000875af1158015611219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123d9190613ae6565b61127c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127390613f1d565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c826040516112c291906131c1565b60405180910390a250565b6060600060078054905067ffffffffffffffff8111156112f0576112ef613300565b5b60405190808252806020026020018201604052801561132957816020015b61131661306b565b81526020019060019003908161130e5790505b50905060005b6007805490508161ffff161015611426576008600060078361ffff168154811061135c5761135b613e16565b5b90600052602060002001548152602001908152602001600020604051806060016040529081600082015481526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a9004600f0b600f0b600f0b81525050828261ffff168151811061140857611407613e16565b5b6020026020010181905250808061141e90613f4b565b91505061132f565b508091505090565b6000611438611d20565b73ffffffffffffffffffffffffffffffffffffffff16611456610cea565b73ffffffffffffffffffffffffffffffffffffffff16146114ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a390613a5f565b60405180910390fd5b600084131561153c576114bd610ab7565b6114c685612150565b111561151a576114d4610ab7565b6114dd85612150565b6040517f3cb0273a000000000000000000000000000000000000000000000000000000008152600401611511929190613a7f565b60405180910390fd5b61152384612150565b600660008282546115349190613f75565b925050819055505b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b92696a306394f6113460e01b306394e05b2c60e01b600a546040516024016115a191906131c1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518563ffffffff1660e01b815260040161161d9493929190614006565b6020604051808303816000875af115801561163c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116609190614067565b90506040518060a001604052808781526020018681526020018581526020018481526020018281525060096000600a5481526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040155905050600a60008154809291906116e690614094565b91905055915050949350505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600960008481526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050600061177f826000015161234c565b73ffffffffffffffffffffffffffffffffffffffff1663cdf456e16040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ed9190614067565b905060006117f96123f1565b73ffffffffffffffffffffffffffffffffffffffff1663654a60ac83670de0b6b3a76400007f73555344000000000000000000000000000000000000000000000000000000006040518463ffffffff1660e01b815260040161185d93929190614117565b602060405180830381865afa15801561187a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189e9190613c39565b90506000836040015113156118bf5782606001518111159350505050611919565b6000836040015112156118de5782606001518110159350505050611919565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119109061419a565b60405180910390fd5b919050565b611926611d20565b73ffffffffffffffffffffffffffffffffffffffff16611944610cea565b73ffffffffffffffffffffffffffffffffffffffff161461199a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199190613a5f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611a09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a009061422c565b60405180910390fd5b611a1281612171565b50565b600060149054906101000a900460ff1615611a65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5c90613cb2565b60405180910390fd5b600060159054906101000a900460ff1615611ab5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aac90613d1e565b60405180910390fd5b6001600060156101000a81548160ff02191690831515021790555083600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dacb2d017f467574757265734d61726b65744d616e616765720000000000000000000000006040518263ffffffff1660e01b8152600401611bcd91906142be565b602060405180830381865afa158015611bea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0e91906142ec565b600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611cd933612171565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600033905090565b61ffff801681511115611d735780516040517f0a9fd21a000000000000000000000000000000000000000000000000000000008152600401611d6a91906131c1565b60405180910390fd5b6000805b82518161ffff161015611f2a57828161ffff1681518110611d9b57611d9a613e16565b5b60200260200101516060015115611de957611dd7838261ffff1681518110611dc657611dc5613e16565b5b602002602001015160000151612492565b82611de29190613f75565b9150611f17565b6000838261ffff1681518110611e0257611e01613e16565b5b6020026020010151602001511215611e9757611e85838261ffff1681518110611e2e57611e2d613e16565b5b602002602001015160200151848361ffff1681518110611e5157611e50613e16565b5b602002602001015160400151858461ffff1681518110611e7457611e73613e16565b5b602002602001015160000151612608565b82611e909190613f75565b9150611f16565b611f08838261ffff1681518110611eb157611eb0613e16565b5b602002602001015160200151848361ffff1681518110611ed457611ed3613e16565b5b602002602001015160400151858461ffff1681518110611ef757611ef6613e16565b5b6020026020010151600001516127c9565b82611f139190613f75565b91505b5b8080611f2290613f4b565b915050611d77565b50600081111561214c57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fdf573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200391906142ec565b612710600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639ee8e1986040518163ffffffff1660e01b8152600401602060405180830381865afa158015612073573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120979190613c39565b856120a29190614319565b6120ac91906143a2565b6040518363ffffffff1660e01b81526004016120c9929190613aa8565b6020604051808303816000875af11580156120e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210c9190613ae6565b61214b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121429061441f565b60405180910390fd5b5b5050565b600080821261215f578161216a565b816121699061443f565b5b9050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612335576000612286610a1f565b73ffffffffffffffffffffffffffffffffffffffff16836040516122a9906144b8565b60006040518083038185875af1925050503d80600081146122e6576040519150601f19603f3d011682016040523d82523d6000602084013e6122eb565b606091505b505090508061232f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161232690614519565b60405180910390fd5b50612348565b61234781612341610a1f565b846129e9565b5b5050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e63bfadb836040518263ffffffff1660e01b81526004016123a99190613235565b602060405180830381865afa1580156123c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ea91906142ec565b9050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dacb2d016040518163ffffffff1660e01b815260040161244c906145d1565b602060405180830381865afa158015612469573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248d91906142ec565b905090565b600061249d82612a6f565b60006124a88361234c565b90508073ffffffffffffffffffffffffffffffffffffffff1663c393d0e36040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156124f257600080fd5b505af1158015612506573d6000803e3d6000fd5b5050505060008173ffffffffffffffffffffffffffffffffffffffff166355f57510306040518263ffffffff1660e01b81526004016125459190613610565b60a060405180830381865afa158015612562573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125869190614695565b505092505050806fffffffffffffffffffffffffffffffff1692508173ffffffffffffffffffffffffffffffffffffffff16635a1cbd2b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156125e957600080fd5b505af11580156125fd573d6000803e3d6000fd5b505050505050919050565b6000806126148361234c565b905061261f85612150565b9150600084146126b7578073ffffffffffffffffffffffffffffffffffffffff1663a28a2bc0857f4b57454e544100000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401612684929190614710565b600060405180830381600087803b15801561269e57600080fd5b505af11580156126b2573d6000803e3d6000fd5b505050505b8073ffffffffffffffffffffffffffffffffffffffff166388a3c848866040518263ffffffff1660e01b81526004016126f09190614739565b600060405180830381600087803b15801561270a57600080fd5b505af115801561271e573d6000803e3d6000fd5b505050506000808273ffffffffffffffffffffffffffffffffffffffff166355f57510306040518263ffffffff1660e01b815260040161275e9190613610565b60a060405180830381865afa15801561277b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061279f9190614695565b945050935050506127b285838386612c08565b846127bd9190613f75565b93505050509392505050565b6000806127d58361234c565b905060008513156128ac576127e985612150565b91506127f3610ab7565b82111561284057612802610ab7565b826040517f3cb0273a000000000000000000000000000000000000000000000000000000008152600401612837929190613a7f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166388a3c848866040518263ffffffff1660e01b81526004016128799190614739565b600060405180830381600087803b15801561289357600080fd5b505af11580156128a7573d6000803e3d6000fd5b505050505b60008414612942578073ffffffffffffffffffffffffffffffffffffffff1663a28a2bc0857f4b57454e544100000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b815260040161290f929190614710565b600060405180830381600087803b15801561292957600080fd5b505af115801561293d573d6000803e3d6000fd5b505050505b6000808273ffffffffffffffffffffffffffffffffffffffff166355f57510306040518263ffffffff1660e01b815260040161297e9190613610565b60a060405180830381865afa15801561299b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129bf9190614695565b945050935050506129d285838386612c08565b846129dd9190613f75565b93505050509392505050565b612a6a8363a9059cbb60e01b8484604051602401612a08929190613aa8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612dc1565b505050565b6000801b600860008381526020019081526020016000206000015403612acc57806040517f143359ab000000000000000000000000000000000000000000000000000000008152600401612ac39190613235565b60405180910390fd5b600860008281526020019081526020016000206000808201600090556001820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160106101000a8154906fffffffffffffffffffffffffffffffff021916905550506000600780549050905060005b818161ffff161015612bdb578260078261ffff1681548110612b6257612b61613e16565b5b906000526020600020015403612bc8576007600183612b819190613bae565b81548110612b9257612b91613e16565b5b906000526020600020015460078261ffff1681548110612bb557612bb4613e16565b5b9060005260206000200181905550612bdb565b8080612bd390613f4b565b915050612b3d565b506007805480612bee57612bed614754565b5b600190038181906000526020600020016000905590555050565b60008083600f0b03612c9757612c1d85612a6f565b836fffffffffffffffffffffffffffffffff1690508173ffffffffffffffffffffffffffffffffffffffff16635a1cbd2b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612c7a57600080fd5b505af1158015612c8e573d6000803e3d6000fd5b50505050612db9565b60006040518060600160405280878152602001866fffffffffffffffffffffffffffffffff16815260200185600f0b81525090506000801b600860008881526020019081526020016000206000015403612d155760078690806001815401808255809150506001900390600052602060002001600090919091909150555b80600860008881526020019081526020016000206000820151816000015560208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160106101000a8154816fffffffffffffffffffffffffffffffff0219169083600f0b6fffffffffffffffffffffffffffffffff160217905550905050505b949350505050565b6000612e23826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612e889092919063ffffffff16565b9050600081511115612e835780806020019051810190612e439190613ae6565b612e82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e79906147f5565b60405180910390fd5b5b505050565b6060612e978484600085612ea0565b90509392505050565b606082471015612ee5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612edc90614887565b60405180910390fd5b612eee85612fb4565b612f2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f24906148f3565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612f569190614944565b60006040518083038185875af1925050503d8060008114612f93576040519150601f19603f3d011682016040523d82523d6000602084013e612f98565b606091505b5091509150612fa8828286612fd7565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315612fe757829050613037565b600083511115612ffa5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161302e919061499f565b60405180910390fd5b9392505050565b60405180608001604052806000801916815260200160008152602001600081526020016000151581525090565b60405180606001604052806000801916815260200160006fffffffffffffffffffffffffffffffff1681526020016000600f0b81525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6130cb816130b8565b81146130d657600080fd5b50565b6000813590506130e8816130c2565b92915050565b600060208284031215613104576131036130ae565b5b6000613112848285016130d9565b91505092915050565b613124816130b8565b82525050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61314f8161312a565b82525050565b600081600f0b9050919050565b61316b81613155565b82525050565b6000606082019050613186600083018661311b565b6131936020830185613146565b6131a06040830184613162565b949350505050565b6000819050919050565b6131bb816131a8565b82525050565b60006020820190506131d660008301846131b2565b92915050565b6131e5816131a8565b81146131f057600080fd5b50565b600081359050613202816131dc565b92915050565b60006020828403121561321e5761321d6130ae565b5b600061322c848285016131f3565b91505092915050565b600060208201905061324a600083018461311b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061329561329061328b84613250565b613270565b613250565b9050919050565b60006132a78261327a565b9050919050565b60006132b98261329c565b9050919050565b6132c9816132ae565b82525050565b60006020820190506132e460008301846132c0565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613338826132ef565b810181811067ffffffffffffffff8211171561335757613356613300565b5b80604052505050565b600061336a6130a4565b9050613376828261332f565b919050565b600067ffffffffffffffff82111561339657613395613300565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000819050919050565b6133c4816133b1565b81146133cf57600080fd5b50565b6000813590506133e1816133bb565b92915050565b60008115159050919050565b6133fc816133e7565b811461340757600080fd5b50565b600081359050613419816133f3565b92915050565b600060808284031215613435576134346133ac565b5b61343f6080613360565b9050600061344f848285016130d9565b6000830152506020613463848285016133d2565b6020830152506040613477848285016133d2565b604083015250606061348b8482850161340a565b60608301525092915050565b60006134aa6134a58461337b565b613360565b905080838252602082019050608084028301858111156134cd576134cc6133a7565b5b835b818110156134f657806134e2888261341f565b8452602084019350506080810190506134cf565b5050509392505050565b600082601f830112613515576135146132ea565b5b8135613525848260208601613497565b91505092915050565b600060208284031215613544576135436130ae565b5b600082013567ffffffffffffffff811115613562576135616130b3565b5b61356e84828501613500565b91505092915050565b600061358282613250565b9050919050565b61359281613577565b82525050565b60006020820190506135ad6000830184613589565b92915050565b60006135be8261329c565b9050919050565b6135ce816135b3565b82525050565b60006020820190506135e960008301846135c5565b92915050565b60006135fa82613250565b9050919050565b61360a816135ef565b82525050565b60006020820190506136256000830184613601565b92915050565b613634816133e7565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613674578082015181840152602081019050613659565b83811115613683576000848401525b50505050565b60006136948261363a565b61369e8185613645565b93506136ae818560208601613656565b6136b7816132ef565b840191505092915050565b60006040820190506136d7600083018561362b565b81810360208301526136e98184613689565b90509392505050565b6136fb816133b1565b82525050565b600060a082019050613716600083018861311b565b61372360208301876136f2565b61373060408301866136f2565b61373d60608301856131b2565b61374a608083018461311b565b9695505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613789816130b8565b82525050565b6137988161312a565b82525050565b6137a781613155565b82525050565b6060820160008201516137c36000850182613780565b5060208201516137d6602085018261378f565b5060408201516137e9604085018261379e565b50505050565b60006137fb83836137ad565b60608301905092915050565b6000602082019050919050565b600061381f82613754565b613829818561375f565b935061383483613770565b8060005b8381101561386557815161384c88826137ef565b975061385783613807565b925050600181019050613838565b5085935050505092915050565b6000602082019050818103600083015261388c8184613814565b905092915050565b600080600080608085870312156138ae576138ad6130ae565b5b60006138bc878288016130d9565b94505060206138cd878288016133d2565b93505060406138de878288016133d2565b92505060606138ef878288016131f3565b91505092959194509250565b6000602082019050613910600083018461362b565b92915050565b61391f816135ef565b811461392a57600080fd5b50565b60008135905061393c81613916565b92915050565b600060208284031215613958576139576130ae565b5b60006139668482850161392d565b91505092915050565b61397881613577565b811461398357600080fd5b50565b6000813590506139958161396f565b92915050565b600080600080608085870312156139b5576139b46130ae565b5b60006139c38782880161392d565b94505060206139d48782880161392d565b93505060406139e58782880161392d565b92505060606139f687828801613986565b91505092959194509250565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613a49602083613a02565b9150613a5482613a13565b602082019050919050565b60006020820190508181036000830152613a7881613a3c565b9050919050565b6000604082019050613a9460008301856131b2565b613aa160208301846131b2565b9392505050565b6000604082019050613abd6000830185613601565b613aca60208301846131b2565b9392505050565b600081519050613ae0816133f3565b92915050565b600060208284031215613afc57613afb6130ae565b5b6000613b0a84828501613ad1565b91505092915050565b7f4d617267696e426173653a207769746864726177206661696c65640000000000600082015250565b6000613b49601b83613a02565b9150613b5482613b13565b602082019050919050565b60006020820190508181036000830152613b7881613b3c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613bb9826131a8565b9150613bc4836131a8565b925082821015613bd757613bd6613b7f565b5b828203905092915050565b600081519050613bf18161396f565b92915050565b600060208284031215613c0d57613c0c6130ae565b5b6000613c1b84828501613be2565b91505092915050565b600081519050613c33816131dc565b92915050565b600060208284031215613c4f57613c4e6130ae565b5b6000613c5d84828501613c24565b91505092915050565b7f43616e6e6f7420696e697469616c697a6520696d706c656d656e746174696f6e600082015250565b6000613c9c602083613a02565b9150613ca782613c66565b602082019050919050565b60006020820190508181036000830152613ccb81613c8f565b9050919050565b7f416c726561647920696e697469616c697a656400000000000000000000000000600082015250565b6000613d08601383613a02565b9150613d1382613cd2565b602082019050919050565b60006020820190508181036000830152613d3781613cfb565b9050919050565b7f4f707352656164793a206f6e6c794f7073000000000000000000000000000000600082015250565b6000613d74601183613a02565b9150613d7f82613d3e565b602082019050919050565b60006020820190508181036000830152613da381613d67565b9050919050565b7f4f72646572206e6f7420726561647920666f7220657865637574696f6e000000600082015250565b6000613de0601d83613a02565b9150613deb82613daa565b602082019050919050565b60006020820190508181036000830152613e0f81613dd3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050613e5481613916565b92915050565b60008060408385031215613e7157613e706130ae565b5b6000613e7f85828601613c24565b9250506020613e9085828601613e45565b9150509250929050565b6000606082019050613eaf6000830186613601565b613ebc6020830185613601565b613ec960408301846131b2565b949350505050565b7f4d617267696e426173653a206465706f736974206661696c6564000000000000600082015250565b6000613f07601a83613a02565b9150613f1282613ed1565b602082019050919050565b60006020820190508181036000830152613f3681613efa565b9050919050565b600061ffff82169050919050565b6000613f5682613f3d565b915061ffff8203613f6a57613f69613b7f565b5b600182019050919050565b6000613f80826131a8565b9150613f8b836131a8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613fc057613fbf613b7f565b5b828201905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61400081613fcb565b82525050565b600060808201905061401b6000830187613601565b6140286020830186613ff7565b6140356040830185613601565b81810360608301526140478184613689565b905095945050505050565b600081519050614061816130c2565b92915050565b60006020828403121561407d5761407c6130ae565b5b600061408b84828501614052565b91505092915050565b600061409f826131a8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036140d1576140d0613b7f565b5b600182019050919050565b6000819050919050565b60006141016140fc6140f7846140dc565b613270565b6131a8565b9050919050565b614111816140e6565b82525050565b600060608201905061412c600083018661311b565b6141396020830185614108565b614146604083018461311b565b949350505050565b7f4f726465722073697a6520300000000000000000000000000000000000000000600082015250565b6000614184600c83613a02565b915061418f8261414e565b602082019050919050565b600060208201905081810360008301526141b381614177565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614216602683613a02565b9150614221826141ba565b604082019050919050565b6000602082019050818103600083015261424581614209565b9050919050565b7f4d617267696e426173653a20436f756c64206e6f74206765742046757475726560008201527f73204d61726b6574204d616e6167657200000000000000000000000000000000602082015250565b60006142a8603083613a02565b91506142b38261424c565b604082019050919050565b60006040820190506142d3600083018461311b565b81810360208301526142e48161429b565b905092915050565b600060208284031215614302576143016130ae565b5b600061431084828501613e45565b91505092915050565b6000614324826131a8565b915061432f836131a8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561436857614367613b7f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006143ad826131a8565b91506143b8836131a8565b9250826143c8576143c7614373565b5b828204905092915050565b7f4d617267696e426173653a20756e61626c6520746f2070617920666565000000600082015250565b6000614409601d83613a02565b9150614414826143d3565b602082019050919050565b60006020820190508181036000830152614438816143fc565b9050919050565b600061444a826133b1565b91507f8000000000000000000000000000000000000000000000000000000000000000820361447c5761447b613b7f565b5b816000039050919050565b600081905092915050565b50565b60006144a2600083614487565b91506144ad82614492565b600082019050919050565b60006144c382614495565b9150819050919050565b7f5f7472616e736665723a20455448207472616e73666572206661696c65640000600082015250565b6000614503601e83613a02565b915061450e826144cd565b602082019050919050565b60006020820190508181036000830152614532816144f6565b9050919050565b7f45786368616e6765526174657300000000000000000000000000000000000000815250565b7f4d617267696e426173653a20436f756c64206e6f74206765742045786368616e60008201527f6765526174657300000000000000000000000000000000000000000000000000602082015250565b60006145bb602783613a02565b91506145c68261455f565b604082019050919050565b60006040820190506145e560008301614539565b81810360208301526145f6816145ae565b9050919050565b600067ffffffffffffffff82169050919050565b61461a816145fd565b811461462557600080fd5b50565b60008151905061463781614611565b92915050565b6146468161312a565b811461465157600080fd5b50565b6000815190506146638161463d565b92915050565b61467281613155565b811461467d57600080fd5b50565b60008151905061468f81614669565b92915050565b600080600080600060a086880312156146b1576146b06130ae565b5b60006146bf88828901614628565b95505060206146d088828901614628565b94505060406146e188828901614654565b93505060606146f288828901614654565b925050608061470388828901614680565b9150509295509295909350565b600060408201905061472560008301856136f2565b614732602083018461311b565b9392505050565b600060208201905061474e60008301846136f2565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006147df602a83613a02565b91506147ea82614783565b604082019050919050565b6000602082019050818103600083015261480e816147d2565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000614871602683613a02565b915061487c82614815565b604082019050919050565b600060208201905081810360008301526148a081614864565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006148dd601d83613a02565b91506148e8826148a7565b602082019050919050565b6000602082019050818103600083015261490c816148d0565b9050919050565b600061491e8261363a565b6149288185614487565b9350614938818560208601613656565b80840191505092915050565b60006149508284614913565b915081905092915050565b600081519050919050565b60006149718261495b565b61497b8185613a02565b935061498b818560208601613656565b614994816132ef565b840191505092915050565b600060208201905081810360008301526149b98184614966565b90509291505056fea2646970667358221220fc1f8634f388087d741663d5c2f184c593c4f3b822f4bda2da3e54d77d19f8cf64736f6c634300080d0033",
    "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80635c60da1b1161005b5780635c60da1b146100dc57806382689cae146100fa578063bf335e6214610118578063e70abe92146101365761007d565b806305a2ee2a1461008257806334b366f9146100a057806354fd4d50146100be575b600080fd5b61008a610154565b60405161009791906105df565b60405180910390f35b6100a8610178565b6040516100b591906105df565b60405180910390f35b6100c661019e565b6040516100d39190610693565b60405180910390f35b6100e461022c565b6040516100f19190610714565b60405180910390f35b610102610250565b60405161010f9190610750565b60405180910390f35b610120610274565b60405161012d91906105df565b60405180910390f35b61013e61048b565b60405161014b919061078c565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080546101ab906107d6565b80601f01602080910402602001604051908101604052809291908181526020018280546101d7906107d6565b80156102245780601f106101f957610100808354040283529160200191610224565b820191906000526020600020905b81548152906001019060200180831161020757829003601f168201915b505050505081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806102d67f00000000000000000000000000000000000000000000000000000000000000006040518060400160405280601081526020017f4372656174696f6e206661696c757265000000000000000000000000000000008152506104af565b90508073ffffffffffffffffffffffffffffffffffffffff1663f8c8765e7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000006040518563ffffffff1660e01b81526004016103999493929190610807565b600060405180830381600087803b1580156103b357600080fd5b505af11580156103c7573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b815260040161040491906105df565b600060405180830381600087803b15801561041e57600080fd5b505af1158015610432573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f14cb25cca821184a88389fa7823ef6a4cd65897a89cbdcf5169542b8d790478b8260405161047c91906105df565b60405180910390a28091505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806104bb84610543565b90506037602082016000f09150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415839061053b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105329190610693565b60405180910390fd5b505092915050565b6060693d602d80600a3d3981f360b01b69363d3d373d3d3d363d7360b01b836e5af43d82803e903d91602b57fd5bf360881b604051602001610588949392919061092e565b6040516020818303038152906040529050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105c98261059e565b9050919050565b6105d9816105be565b82525050565b60006020820190506105f460008301846105d0565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610634578082015181840152602081019050610619565b83811115610643576000848401525b50505050565b6000601f19601f8301169050919050565b6000610665826105fa565b61066f8185610605565b935061067f818560208601610616565b61068881610649565b840191505092915050565b600060208201905081810360008301526106ad818461065a565b905092915050565b6000819050919050565b60006106da6106d56106d08461059e565b6106b5565b61059e565b9050919050565b60006106ec826106bf565b9050919050565b60006106fe826106e1565b9050919050565b61070e816106f3565b82525050565b60006020820190506107296000830184610705565b92915050565b600061073a826106e1565b9050919050565b61074a8161072f565b82525050565b60006020820190506107656000830184610741565b92915050565b60006107768261059e565b9050919050565b6107868161076b565b82525050565b60006020820190506107a1600083018461077d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806107ee57607f821691505b602082108103610801576108006107a7565b5b50919050565b600060808201905061081c60008301876105d0565b61082960208301866105d0565b61083660408301856105d0565b610843606083018461077d565b95945050505050565b60007fffffffffffffffffffff0000000000000000000000000000000000000000000082169050919050565b6000819050919050565b61089361088e8261084c565b610878565b82525050565b60008160601b9050919050565b60006108b182610899565b9050919050565b60006108c3826108a6565b9050919050565b6108db6108d6826105be565b6108b8565b82525050565b60007fffffffffffffffffffffffffffffff000000000000000000000000000000000082169050919050565b6000819050919050565b610928610923826108e1565b61090d565b82525050565b600061093a8287610882565b600a8201915061094a8286610882565b600a8201915061095a82856108ca565b60148201915061096a8284610917565b600f820191508190509594505050505056fea2646970667358221220a5ffd0c35da7e05d933149edaf3c74f780d7149e999f3785d65baab72142888c64736f6c634300080d0033",
    "devdoc": {
      "author": "JaredBorders (jaredborders@proton.me), JChiaramonte7 (jeremy@bytecode.llc)",
      "kind": "dev",
      "methods": {
        "constructor": {
          "params": {
            "_addressResolver": ": contract address for synthetix address resolver",
            "_marginAsset": ": token contract address used for account margin",
            "_marginBaseSettings": ": contract address for MarginBase account settings",
            "_ops": ": contract address for gelato ops -- must be payable",
            "_version": ": version of contract"
          }
        },
        "newAccount()": {
          "details": "this contract is the initial owner of cloned MarginBase, but ownership is transferred after successful initialization"
        }
      },
      "title": "Kwenta MarginBase Factory",
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "addressResolver()": {
          "notice": "synthetix address resolver"
        },
        "constructor": {
          "notice": "deploy MarginBase implementation to later be cloned"
        },
        "implementation()": {
          "notice": "MarginBase contract acting as user's account"
        },
        "marginAsset()": {
          "notice": "ERC20 token used to interact with markets"
        },
        "marginBaseSettings()": {
          "notice": "settings for MarginBase accounts"
        },
        "newAccount()": {
          "notice": "clone MarginBase (i.e. create new account for user)"
        },
        "ops()": {
          "notice": "gelato ops"
        }
      },
      "notice": "Factory which enables deploying a MarginBase account for any user ",
      "version": 1
    },
    "storageLayout": {
      "storage": [
        {
          "astId": 733,
          "contract": "contracts/MarginAccountFactory.sol:MarginAccountFactory",
          "label": "version",
          "offset": 0,
          "slot": "0",
          "type": "t_string_storage"
        },
        {
          "astId": 747,
          "contract": "contracts/MarginAccountFactory.sol:MarginAccountFactory",
          "label": "marginBaseSettings",
          "offset": 0,
          "slot": "1",
          "type": "t_address"
        }
      ],
      "types": {
        "t_address": {
          "encoding": "inplace",
          "label": "address",
          "numberOfBytes": "20"
        },
        "t_string_storage": {
          "encoding": "bytes",
          "label": "string",
          "numberOfBytes": "32"
        }
      }
    }
  }